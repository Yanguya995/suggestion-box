{
  "_from": "tar-pack@^3.4.0",
  "_id": "tar-pack@3.4.0",
  "_inBundle": false,
  "_integrity": "sha1-I74tf2cagzk3bL2wuP4/3r8xeYQ=",
  "_location": "/tar-pack",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "tar-pack@^3.4.0",
    "name": "tar-pack",
    "escapedName": "tar-pack",
    "rawSpec": "^3.4.0",
    "saveSpec": null,
    "fetchSpec": "^3.4.0"
  },
  "_requiredBy": [
    "/node-pre-gyp"
  ],
  "_resolved": "https://registry.npmjs.org/tar-pack/-/tar-pack-3.4.0.tgz",
  "_shasum": "23be2d7f671a8339376cbdb0b8fe3fdebf317984",
  "_shrinkwrap": null,
  "_spec": "tar-pack@^3.4.0",
  "_where": "/home/njabulothwala/Own/git/suggestion-box/node_modules/node-pre-gyp",
  "bin": null,
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^2.2.0",
    "fstream": "^1.0.10",
    "fstream-ignore": "^1.0.5",
    "once": "^1.3.3",
    "readable-stream": "^2.1.4",
    "rimraf": "^2.5.1",
    "tar": "^2.2.1",
    "uid-number": "^0.0.6"
  },
  "deprecated": false,
  "description": "Package and un-package modules of some sort (in tar/gz bundles).  This is mostly useful for package managers.  Note that it doesn't check for or touch `package.json` so it can be used even if that's not the way you store your package info.",
  "devDependencies": {
    "mkdirp": "*",
    "mocha": "*",
    "rfile": "*"
  },
  "name": "tar-pack",
  "optionalDependencies": {},
  "peerDependencies": {},
  "scripts": {},
  "version": "3.4.0"
}
